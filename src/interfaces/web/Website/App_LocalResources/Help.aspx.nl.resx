<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Item1.InnerText" xml:space="preserve">
    <value>&lt;b&gt;Mobiele client&lt;/b&gt;: Je zal je portfolio kunnen bekijken en beheren vanuit een Java applicatie op je gsm.</value>
  </data>
  <data name="Item2.InnerText" xml:space="preserve">
    <value>&lt;b&gt;Ranking&lt;/b&gt;: Een ranking pagina waar de beste beleggers in terecht komen.</value>
  </data>
  <data name="Item3.InnerText" xml:space="preserve">
    <value>&lt;b&gt;Complexe orders&lt;/b&gt;: Je zal uitgebreide regels kunnen instellen om aandelen automatische te kopen of verkopen.</value>
  </data>
  <data name="Page.Title" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Para11.InnerText" xml:space="preserve">
    <value>Stockplay is een beursspel waar je fictieve aandelen aankoopt. De beurs van Stockplay omvat verschillende beursen van de hele wereld en werkt met live koersen, rechtstreeks van de beurs.</value>
  </data>
  <data name="Para12.InnerText" xml:space="preserve">
    <value>Om mee te spelen kan je een account registreren op de &lt;a runat="server" href="~/Register.aspx"&gt;registratie pagina&lt;/a&gt;. Je hoeft enkel je naam en e-mail op te geven om te beginnen spelen. Vervolgens krijg je een startbedrag toegewezen waarmee je kunt kopen op de beurs. Voor een overzicht van de beschikbare effecten ga je naar het &lt;a runat="server" href="SecuritiesOverview.aspx"&gt;effectenoverzicht.&lt;/a&gt;</value>
  </data>
  <data name="Para13.InnerText" xml:space="preserve">
    <value>Eenmaal je een aandeel gevonden hebt dat je wilt kopen, klik je op de 'Buy Security' knop om naar de orderpagina te gaan. Hier kan je opgeven hoeveel aandelen je wilt kopen. Momenteel ondersteunt Stockplay enkel gewone orders die onmiddellijk uitgevoerd worden, maar in de toekomst zal je complexere orders kunnen plaatsen.</value>
  </data>
  <data name="Para21.InnerText" xml:space="preserve">
    <value>Het Stockplay project is nog in volle ontwikkeling en bevat nog niet alle functionaliteit die in het eindproduct aanwezig zal zijn. Hieronder kun je de belangrijkste punten vinden die nog moeten afgewerkt worden:</value>
  </data>
  <data name="ParaIntro.InnerText" xml:space="preserve">
    <value>Welkom bij de Stockplay helppagina. Hier kan je algemene informatie vinden over het spel en ook de status van het project bekijken.</value>
  </data>
  <data name="Subtitle1.InnerText" xml:space="preserve">
    <value>Over Stockplay</value>
  </data>
  <data name="Subtitle2.InnerText" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Title.InnerText" xml:space="preserve">
    <value>Help</value>
  </data>
</root>