#!/usr/bin/env perl

################################################################################
# Configuration
#

# Packages
use StockPlay;
use LWP::Simple;
use Date::Manip;
use DateTime::Format::DateManip;
use StockPlay::Factory;
use StockPlay::Exchange;
use StockPlay::Index;
use StockPlay::Security;

# Write nicely
use warnings;
use strict;



################################################################################
# Main
#

#
# Setup
#

# Get a logger
StockPlay::Logger->setup("historic");
my $logger = StockPlay::Logger->logger;
$logger->info("bootstrapping historic data loader");

my $stockplay = new StockPlay();
my $factory = $stockplay->getFactory();


#
# Existing data
#

$logger->info("fetching dataset");

# Load the exchanges
my %markets = (
	'PA'	=> 1,
	'BSE'	=> 3
);
my @exchanges = $factory->buildExchanges( sub {
	grep { $_->symbol =~ m{^(BSE|PA)$} } @_;
});


#
# Historic data
#

$logger->info("fetching historic data");

# Process all securities (per exchange)
# TODO: Move to a plugin
foreach my $exchange (@exchanges) {
	foreach my $security (@{$exchange->securities}) {
		# Fetch historic data
		$logger->debug("processing " . $security->name, " (ISIN " . $security->isin . ")");
		my ($d1, $d2) = (UnixDate("2 year ago", "%d\/%m\/%Y"), UnixDate("1 day ago", "%d\/%m\/%Y"));
		my $isin = $security->isin;
		my $mep = $markets{$exchange->symbol};
		my $content = get("http://www.euronext.com/tools/datacentre/dataCentreDownloadExcell.jcsv?cha=2593&lan=EN&fileFormat=txt&separator=.&dateFormat=dd/MM/yy&isinCode=$isin&selectedMep=$mep&indexCompo=&opening=on&high=on&low=on&closing=on&volume=on&dateFrom=$d1&dateTo=$d2&typeDownload=2");
		
		# Convert to quotes
		my @quotes;
		foreach (split(/\n/, $content)) {
			s/\s//g;	# Because chomp doesn't remove CR's
			s/,//g;		# We want no thousands-separator
			my @fields = split(/;/);
			if (@fields == 6) {
				my ($date, $open, $high, $low, $close, $volume) =  @fields;
				next unless $date =~ m{^[\d\/]+$};
				$volume = 0 if ($volume eq "-");
				
				my $quote = new StockPlay::Quote (
					security	=> $isin,
					time		=> to_datetime($date),	# TODO: timezone (now floating) && closing hour
					price		=> $close,
					low		=> $low,
					high		=> $high,
					open		=> $open,
					volume		=> $volume
				);
				
				push(@quotes, $quote);
			}
		}
		
		# Save the quotes
		if (@quotes > 0) {
			$factory->createQuotes(@quotes);
		} else {
			$logger->error("no quotes found");
		}
	}
}

exit(0);



################################################################################
# Routines
#

sub to_datetime {
	my ($date) = @_;
	my ($day, $month, $year) = split(/\//, $date);
	$year = "20".$year;
	
	return new DateTime(
		year	=> $year,
		month	=> $month,
		day	=> $day,
		hour	=> 23,
		minute	=> 59
	);
}

__END__



################################################################################
# Documentation
#

=pod

=head1 NAME

stockplay-historic - Historic data fetcher

=head1 DESCRIPTION

This component is able to fetch historic data from online resources. As this
is a process only done once, it is not integrated with the other scraper
component.

=head1 COPYRIGHT

Copyright 2010 The StockPlay development team as listed in the AUTHORS file.

This software is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public Licence (GPL) as published by the
Free Software Foundation (FSF).

The full text of the license can be found in the
LICENSE file included with this module.

=cut
