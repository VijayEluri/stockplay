#!/usr/bin/env perl

################################################################################
# Configuration
#

# XXX: library location
use lib '../lib';

# Packages
use Date::Manip;
use DateTime::Format::DateManip;
use StockPlay::Factory;
use StockPlay::Exchange;
use StockPlay::Index;
use StockPlay::Security;
use Chart::Clicker;
use Chart::Clicker::Axis::DateTime;
use Chart::Clicker::Data::Series;
use Chart::Clicker::Data::DataSet;
use Chart::Clicker::Renderer::Point;


# Write nicely
use warnings;
use strict;

# Constants
my $PLUGIN_MAX_AGE = 3600*24*7;


################################################################################
# Main
#

#
# Setup
#

# Get a logger
StockPlay::Logger->setup("chart");
my $logger = StockPlay::Logger->logger;
$logger->info("bootstrapping charter");

# Load the factory
$logger->debug("loading factory");
my $factory = new StockPlay::Factory();
my $choice;


#
# Exchanges
#

$logger->info("fetching exchanges");

# Load the exchanges
my @exchanges = $factory->getExchanges();

# Show them
print "- Available exchanges:\n";
for (my $i = 0; $i < @exchanges; $i++) {
	print "\t$i) ", $exchanges[$i]->name, "\n";
}
$choice = undef;
while (not defined $choice or $choice < 0 or $choice > $#exchanges) {
	print "? Exchange: ";
	$choice = <STDIN>;
	chomp $choice;
}
my $exchange = $exchanges[$choice];


#
# Securities
#

$logger->info("fetching securities");

# Load the securities
my @securities = $factory->getSecurities($exchange);

# Show them
print "- Available securities:\n";
for (my $i = 0; $i < @securities; $i++) {
	print "\t$i) ", $securities[$i]->name, "\n";
}
$choice = undef;
while (not defined $choice or $choice < 0 or $choice > $#securities) {
	print "? Security: ";
	$choice = <STDIN>;
	chomp $choice;
}
my $security = $securities[$choice];


#
# Quotes
#

$logger->info("fetching quotes");

# Get date range
my ($dm1, $dm2) = (ParseDate("today"), ParseDate("now"));
my ($dt1, $dt2) = (DateTime::Format::DateManip->parse_datetime($dm1), DateTime::Format::DateManip->parse_datetime($dm2));

# Load the quotes
my @quotes = $factory->getQuotes($dt1, $dt2, $security);
$logger->debug("fetched " . scalar @quotes . " quotes");


#
# Generate chart
#

$logger->info("generating chart");

# Create the dataset
$logger->debug("preparing data");
@quotes = sort { DateTime->compare($a->time, $b->time) } @quotes;
my $series = Chart::Clicker::Data::Series->new(
    keys	=> [ map { $_->time->epoch() } @quotes ],
    values	=> [ map { $_->price } @quotes ],
    name	=> $security->name
);
my $ds = Chart::Clicker::Data::DataSet->new(
	series => [ $series ]
);

# Create a graph
$logger->debug("creating graph");
my $cc = Chart::Clicker->new;
my $ctx = $cc->get_context('default');
$ctx->domain_axis(
	Chart::Clicker::Axis::DateTime->new(
		position	=> 'bottom',
		orientation	=> 'horizontal'
	)
);
$cc->add_to_datasets($ds);

# Write the graph
$logger->debug("writing graph");
$cc->write_output($security->name . '.png');

exit(0);



################################################################################
# Routines
#

__END__



################################################################################
# Documentation
#

=pod

=head1 NAME

stockplay-scraper - Scraper component of StockPlay

=head1 SYNOPSIS

=head1 COPYRIGHT

Copyright 2010 The StockPlay development team as listed in the AUTHORS file.

This software is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public Licence (GPL) as published by the
Free Software Foundation (FSF).

The full text of the license can be found in the
LICENSE file included with this module.

=cut
