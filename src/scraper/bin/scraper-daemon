#!/usr/bin/env perl

################################################################################
# Configuration
#

# XXX: library location
use lib '../lib';

# Packages
use Storable;
use StockPlay::Scraper::PluginManager;
use StockPlay::Scraper::Daemon;

# Write nicely
use warnings;
use strict;

# Constants
my $PLUGIN_MAX_AGE = 3600*24*7;


################################################################################
# Main
#

# Get a logger
my $logger = StockPlay::Logger->logger;
$logger->info("bootstrapping scraper");

# Configure last-resort error loggers
$SIG{__DIE__} = sub {
	die(@_) unless (defined $^S && $^S == 0);
	die(@_) if ((caller(2))[3] =~ m{Log::Log4perl::Logger::logdie});
	
	my $error = shift;
	chomp $error;
	StockPlay::Logger->logger((caller(0))[0])->logexit($error);
};
$SIG{__WARN__} = sub {
	die(@_) unless (defined $^S && $^S == 0);
	die(@_) if ((caller(2))[3] =~ m{Log::Log4perl::Logger::logwarn});
	
	my $warning = shift;
	chomp $warning;
	StockPlay::Logger->logger((caller(0))[0])->warn($warning);
};

# Plugin manager
$logger->info("loading plugin manager");
my $pluginmanager = new StockPlay::Scraper::PluginManager;
my @infohashes = $pluginmanager->get_group('StockPlay::Scraper::Plugin');

# Check homefolder
my $dumpfolder = $ENV{'HOME'} . '/dumps/';
mkdir $dumpfolder unless (-d $dumpfolder);

# Load plugins
# TODO: this code should move to the PluginManager, or at least be executed
#       within an eval block
$logger->info("instantiating all plugins");
my @plugins;
foreach my $infohash (@infohashes) {
	$logger->debug("processing " . $infohash->{name});
	
	# Manage a dump
	my $plugin;
	if (-f $dumpfolder . $infohash->{name} . '.dump') {
		$logger->debug("loading from dump");
		$plugin = retrieve($dumpfolder . $infohash->{name} . '.dump')
			or $logger->logdie("could not load dump ($!)");
		
		if (time - $plugin->infohash->{time} > $PLUGIN_MAX_AGE) {
			$logger->debug("loaded dump out of date");			
			$plugin = undef;
		}
	}
	
	# Instantiate a plugin, if neccesary
	if (not defined $plugin) {
		$logger->debug("creating new dump");
		$plugin = $pluginmanager->instantiate($infohash);
		$plugin->clean();
		store $plugin, $dumpfolder . $infohash->{name} . '.dump';
	}
	
	push(@plugins, $plugin);
}

# Load the factory
$logger->info("loading factory");
my $factory = new StockPlay::Factory(
	server	=> 'http://be04.kapti.com:6800/backend/public',
);

# Load the daemon
$logger->info("loading daemon");
my $daemon = new StockPlay::Scraper::Daemon(
	factory	=> $factory,
	plugins	=> \@plugins
);
$daemon->run();

exit(0);

__END__

################################################################################
# Documentation
#

=pod

=head1 NAME

stockplay-scraper - Scraper component of StockPlay

=head1 SYNOPSIS

=head1 COPYRIGHT

Copyright 2010 The StockPlay development team as listed in the AUTHORS file.

This software is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public Licence (GPL) as published by the
Free Software Foundation (FSF).

The full text of the license can be found in the
LICENSE file included with this module.

=cut
