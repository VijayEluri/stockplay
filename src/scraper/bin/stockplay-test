#!/usr/bin/env perl

################################################################################
# Configuration
#

# Packages
use StockPlay;
use StockPlay::Factory;
use Date::Manip;
use DateTime::Format::DateManip;
use List::Util qw/shuffle/;
use Data::Dumper;

# Write nicely
use warnings;
use strict;



################################################################################
# Main
#

#
# Setup
#

my $stockplay = StockPlay->new(app => "test");
my $factory = $stockplay->getFactory();
my $logger = $stockplay->getLogger();


#
# Test

$logger->debug("testing");

exit;

# Fetch exchanges
my @exchanges = $factory->getExchanges();
my $exchange = (grep { $_->symbol eq "BSE" } @exchanges)[0];

# Fetch list of securities
my @securities = shuffle $factory->getSecurities($exchange);

# Select optimal securities
my @securities_best = @securities[1..5];
my @quotes_best = $factory->getLatestQuotes(@securities_best);

# Calculate current and optimal portfolio
my @portfolio_current = $factory->getPortfolio();
my @portfolio_optimal = ();
my $cash_per_security = $factory->user->cash / (scalar @securities_best);
foreach my $security (@securities_best) {
	my $quote = (grep { $_->quotable eq $security->isin } @quotes_best)[0];
	if (not defined $quote) {
		die("could not find quote for selected security");
	}
	my $amount = int($cash_per_security / $quote->ask);
	$security->amount($amount);
	push(@portfolio_optimal, $security);
}
print "* Current portfolio\n", Dumper(\@portfolio_current), "\n";
print "* Optimal portfolio\n", Dumper(\@portfolio_optimal), "\n";

# Sell old securities
foreach my $security (@portfolio_current) {
	my $security_new = (grep { $_->isin eq $security->isin } @portfolio_optimal)[0];
	if (not defined $security_new) {
		print "- Selling all (", $security->amount, ") of security ", $security->name, "\n";
		$factory->createOrder($security, $security->amount, "SELL");
	} else {
		if ($security->amount > $security_new->amount) {
			my $to_sell = $security->amount - $security_new->amount;
			print "- Selling limited amount (", $to_sell, ") and reducing amount to buy to 0 of security ", $security->name, "\n";
			$factory->createOrder($security, $to_sell, "SELL");
			$security_new->amount(0);
		} else {
			my $to_buy = $security_new->amount - $security->amount;
			print "- Selling none but reducing amount to buy to ", $to_buy, " of security ", $security->name, "\n";
			$security_new->amount($to_buy);
		}
	}
}

# Buy new securities
foreach my $security (@portfolio_optimal) {
	print "- Buying ", $security->amount, " of security ", $security->name, "\n";
	$factory->createOrder($security, $security->amount, "BUY");
}


exit(0);



################################################################################
# Routines
#

__END__



################################################################################
# Documentation
#

=pod

=head1 NAME

stockplay-test - StockPlay test client.

=head1 DESCRIPTION

This client is used to quickly verify backend functionality.

=head1 COPYRIGHT

Copyright 2010 The StockPlay development team as listed in the AUTHORS file.

This software is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public Licence (GPL) as published by the
Free Software Foundation (FSF).

The full text of the license can be found in the
LICENSE file included with this module.

=cut
